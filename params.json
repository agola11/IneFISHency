{"name":"Inefishency","tagline":"A fishtank mounted on an RC car chassis.  The fish's movements control the vehicle (think of a hamster ball, except for a fish...). First place at HackPrinceton Spring 2015!","body":"# Introduction\r\nA fish is a low-maintenance, yet boring pet.  We built a vehicle consisting of a fishtank mounted on a motorized chassis that moves according to the fish's orientation.  This is basically a \"hamster ball\" for a fish.  To accomplish this, we mounted a webcam above the fishtank and tracked the fish's position in the tank using image processing.  The fish's orientation (x, y position) was translated into motor signals.  This was all done in 24 hours and we managed to pull off first place at [HackPrinceton](http://hackprinceton.com/)!\r\n\r\nHere is a [video](https://www.youtube.com/watch?v=Xo1lYPF1lWE) and [picture](https://www.dropbox.com/s/rml0on5dlvvkhqu/2015-04-12%2011.23.11.jpg?dl=0) of the finished product in action.  (We probably look and sound tired because we pulled an all-nighter).\r\n\r\n## People\r\nAnkush Gola, Joseph Bolling, Ted Brundage\r\n\r\n# High-Level Overview\r\nWe used a BeagleBone Black (powered with a power-regulated battery pack) for our processing and I/O.  We also used a pair of [motor controllers](https://www.sparkfun.com/products/9457), \r\n\r\n## Tracking the Fish\r\nA BeagleBone Black embedded linux computer runs an image processing algorithm on a video feed of the fishtank.  To get the computation to be reasonably fast, we had to play with both the framerate and video dimensions. \r\n\r\nThe ``FishTracker`` class in ``fish_tracker.py`` implements the logic for tracking the position of the fish in the tank.  The basic idea is to use a combination of background segmentation using HSV masking to obtain a binary mask, perform morphological operations to de-noise the mask, find the centroid of the the mask to obtain a rough (x,y) position in pixel coordinates, and low pass and median filter the position to eliminate \"jumpy\" readings.  The result of fish tracking is an (x,y) position in pixel coordinates.  (See the ``detect_fish`` function in ``FishTracker``).  We made extensive use of the python OpenCV library. \r\n\r\n## Moving The Vehicle\r\nOur motorized chassis consisted of a hacked RC car with a 3 motors: front, rear, and steering.  We used a pair of Sparkfun [motor controllers](https://www.sparkfun.com/products/9457) for our H-bridges.  We interfaced with the motors using the Adafruit BeagleBone IO libraries for python (``Adafruit_BBIO.GPIO`` and ``Adafruit_BBIO.PWM``) and made a simple ``Motor`` class in ``fish_control.py`` to set the speed and direction of each motor. The speed was set by designating the PWM output value and direction was set by flipping the appropriate GPIO pins to the motor controllers.\r\n\r\nAfter receiving the pixel coordinates of the fish from the fish tracking code (see above), the coordinates are thresholded to fit into one of nine zones (forward right, forward straight, forward left, center right, ... , back left).  It took us some playing around with PWM values to get the thrust and steering just right. The main driver function is ``main`` in ``fish_control.py``.  \r\n\r\n## More Info\r\nThe code should be pretty self-explanatory (although definitely not perfect because it's hackathon code!) If you have any questions or comments, feel free to email me!","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}